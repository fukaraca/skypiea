name: CI Pipeline
run-name: Test of PR by @${{ github.actor }}

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b "$(go env GOPATH)"/bin v2.0.2

      - name: Run linter
        run: make lint

      - name: Run tests
        run: make test

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'

      - name: Helm lint chart
        run: make helm-lint

      - name: Dry-run chart
        run: |
          helm template skypiea-ai ./helm/skypiea-ai \
            --values ./helm/skypiea-ai/values.yaml \
            > /dev/null

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Compute Base Version & Build Number
        id: compute-version
        run: |
          BASE_VERSION="$(cat .Version | tr -d '[:space:]')"
          BUILD_NUMBER="${{ github.run_number }}"
          FULL_VERSION="${BASE_VERSION}.${BUILD_NUMBER}"

          echo "base_version=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "build_number=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
          echo "full_version=$FULL_VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT2GHCR }}

      - name: Build and push Docker image for Server
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/server.Dockerfile
          build-args: |
            FULL_VERSION=${{ steps.compute-version.outputs.full_version }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/skypiea-server:${{ steps.compute-version.outputs.full_version }}
            ghcr.io/${{ github.repository_owner }}/skypiea-server:latest

      - name: Build and push Docker image for Worker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/worker.Dockerfile
          build-args: |
            FULL_VERSION=${{ steps.compute-version.outputs.full_version }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/skypiea-worker:${{ steps.compute-version.outputs.full_version }}
            ghcr.io/${{ github.repository_owner }}/skypiea-worker:latest

      - name: Package chart
        env:
          CHART_VERSION: ${{ steps.compute-version.outputs.full_version }}
        run: |
          helm package ./helm/skypiea-ai \
            --version "$CHART_VERSION" \
            --app-version "$CHART_VERSION" \
            --destination ./chart-dist

      - name: Push chart to GHCR
        env:
          CHART_VERSION: ${{ steps.compute-version.outputs.full_version }}
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/helm
        run: |
          helm registry login ghcr.io \
            --username '${{ github.actor }}' \
            --password '${{ secrets.PAT2GHCR }}'

          helm push ./chart-dist/skypiea-ai-"$CHART_VERSION".tgz \
            oci://$GHCR_REPO

  deploy:
    name: Deploy to k3s
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - uses: azure/setup-helm@v4
        with: { version: v3.14.4 }
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with: { version: v1.30.0 }

      - name: Write kubeconfig
        run: |
          echo "${{ secrets.K3S_KUBECONFIG }}" > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Ensure namespace exists
        run: |
          kubectl get namespace skypiea || kubectl create namespace skypiea

      - name: Helm registry login
        run: |
          helm registry login ghcr.io \
            --username '${{ github.actor }}' \
            --password '${{ secrets.PAT2GHCR }}'

      - name: Sync registry secret
        run: |
          kubectl -n skypiea create secret docker-registry ghcr-login-secret \
              --docker-server=https://ghcr.io \
              --docker-username='${{ github.actor }}' \
              --docker-password='${{ secrets.PAT2GHCR }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Sync db creds
        run: |
          kubectl -n skypiea create secret generic skypiea-ai-secret-db \
            --from-literal=postgres_username='${{ secrets.PG_USER }}' \
            --from-literal=postgres_password='${{ secrets.PG_PASS }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Sync Gemini API creds
        run: |
          kubectl -n skypiea create secret generic skypiea-ai-secret-gemini \
            --from-literal=api_key='${{ secrets.GEMINI_API_KEY }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm upgrade
        run: |
          helm upgrade --install --debug --wait --atomic --timeout 5m --namespace skypiea skypiea \
            oci://ghcr.io/${{ github.repository_owner }}/helm/skypiea-ai \
            --set imagePullSecrets[0].name=ghcr-login-secret \
            --set-string ingress.host='${{ vars.EC2_DNS }}' \
            --set database.postgresql.host='${{ secrets.PG_HOST }}' \
            --set database.postgresql.port='${{ secrets.PG_PORT }}' \
            --set log.level="info" \
            --set jwt.secret='${{ secrets.JWT_SECRET }}' \
            --set jwt.domain='${{ secrets.JWT_DOMAIN }}'
